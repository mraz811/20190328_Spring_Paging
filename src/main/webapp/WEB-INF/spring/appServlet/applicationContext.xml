<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

<!-- 10^^번 -->
<!-- 환경설정의 값 파일인 properties파일을 읽어 Spring Bean으로 만들어줌-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/db.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- dataSource로 Bean을 생성 // commons dbcp를 필요로 함 -->
	<!-- 지금 만드는 bean은 Spring의 bean이 아니라 dbcp가 만들어 주는 bean입니다. -->
	<!-- html의 값을 가져와 사용하려면 탐색해야하니 id를 부여해줍니다 (dataSource라는 아이디를 사용) -->
	<!-- 11^^번 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${pw}" />
		<property name="defaultAutoCommit" value="true" />
		<!-- transaction 초..  -->
		<property name="maxWait" value="20000"/>
		<!-- 서버가 작거나 그런 경우 maxIdle 잡아주는 경우도 있음 -->
		<property name="maxIdle" value="10"></property>
	</bean>
	
	<!-- mybatis의 mapper파일 권한들은 mybatis setting이 가지고 있음. Spring은 mybatis 연결할뿐 -->
	<!-- Mybatis 객체를 연결. 그 정보를 Spring에 등록 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="/WEB-INF/spring/sqls/mybatis-configuration.xml" />
	</bean>
	
	<!-- 이제 IoC 만들어서 여러분들이 가져다 쓸 수 있게! -->
	<!-- mybatis-spring 사용해서 DI로 사용함 -->
	<!-- 생성된 Mybatis 객체를 Spring이 사용할 수 있는 Bean(Template)으로 등록 -->
	<!-- id로 사용할 것이므로 constructor로 생성을 해주어야 함. 위의 sqlSession을 가지고 오면 전부 가지고 오는 것 -->
	<!-- index="0"은 default 생성자 (생성자가 여러개일 때 0, 1이런식으로 디포트, 우선순위 생성자 해줌)-->
	<!-- 14^^번 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession" />
	</bean>
	
	<!-- 15^^번 트랜잭션 처리 -->
	<!-- transaction 처리 역시 Spring에 등록해주어야 함 -->
	<!-- @Service에 설정 메소드 @Transactional 선언만 해주면 자동으로 예외 발생시 Rollback 해줌요 -->
	<!-- 여기 id는 지금 사용할 건 아니고, 나중에 AOP라고 자동으로 돌려주는 클래스 사용할 때 쓸 것 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 16^^번/ namespace에 tx 올려주기 -->
	<!-- 실행 도중에 에러가 발생하니 advice로 걸어줌  -->
	<!-- 트랜잭션 객체를 만들어 주고 조건을 걸어줌 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>	
	
	<!-- 17^^번 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" 
			pointcut="execution(public * happy.min.jee.model.*Service*.*(..))"/>
	</aop:config>
	
</beans>
